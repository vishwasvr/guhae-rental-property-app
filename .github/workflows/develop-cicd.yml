name: Develop CI/CD

on:
  push:
    branches: [develop]

env:
  STACK_NAME: guhae-dev
  REGION: us-east-1

jobs:
  quality-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install flake8 bandit pytest boto3 moto

      - name: Code linting
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan
        run: |
          bandit -r src/ -f json -o security-report.json || true

      - name: Security audit
        run: |
          ./security-audit.sh

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.json

      - name: Unit tests
        run: |
          # Create basic test structure if not exists
          mkdir -p tests
          if [ ! -f tests/test_lambda.py ]; then
            cat > tests/test_lambda.py << 'EOF'
          import sys
          import os
          sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

          # Set required environment variables before importing
          os.environ['S3_BUCKET_NAME'] = 'test-bucket'
          os.environ['COGNITO_USER_POOL_ID'] = 'test-pool-id'
          os.environ['COGNITO_CLIENT_ID'] = 'test-client-id'
          os.environ['DYNAMODB_TABLE_NAME'] = 'test-table'
          os.environ['AWS_REGION'] = 'us-east-1'

          # Mock boto3 before importing lambda_function
          from unittest.mock import patch, MagicMock
          with patch('boto3.resource'), patch('boto3.client'):
              import lambda_function

          def test_lambda_handler_health():
              """Test health endpoint"""
              with patch('lambda_function.table') as mock_table:
                  mock_table.scan.return_value = {'Items': []}
                  
                  event = {
                      'httpMethod': 'GET',
                      'path': '/api/health',
                      'headers': {}
                  }
                  
                  response = lambda_function.lambda_handler(event, {})
                  
                  assert response['statusCode'] == 200
                  import json
                  body = json.loads(response['body'])
                  assert body['status'] == 'healthy'

          def test_cors_headers():
              """Test CORS headers are present"""
              event = {
                  'httpMethod': 'OPTIONS',
                  'path': '/api/properties',
                  'headers': {}
              }
              
              response = lambda_function.lambda_handler(event, {})
              
              assert response['statusCode'] == 200
              assert 'Access-Control-Allow-Origin' in response['headers']
              assert response['headers']['Access-Control-Allow-Origin'] == '*'
          EOF
          fi

          python -m pytest tests/ -v

      - name: CloudFormation Lint
        run: |
          pip install cfn-lint
          cfn-lint deployment/cloudformation-serverless.yaml

  deploy-dev:
    needs: quality-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install AWS CLI and dependencies
        run: |
          pip install awscli boto3

      - name: Validate AWS credentials
        run: |
          aws sts get-caller-identity

      - name: Deploy to development environment
        run: |
          cd deployment

          echo "ğŸš€ Starting development deployment..."
          echo "Stack: ${{ env.STACK_NAME }}"
          echo "Region: ${{ env.REGION }}"

          # Make deployment script executable
          chmod +x deploy-serverless.sh

          # Deploy everything to dev environment
          ./deploy-serverless.sh all

          echo "âœ… Development deployment completed successfully!"
