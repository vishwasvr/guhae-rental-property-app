AWSTemplateFormatVersion: "2010-09-09"
Description: SERVERLESS Guhae rental property app - Lambda-based for ultra-low costs

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address for notifications
    Default: admin@guhae.com

Resources:
  # S3 Bucket for storage and static website hosting
  GuhaeStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-storage"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ["*"]
            MaxAge: 3000

  # S3 Bucket Policy for public read access to static files
  GuhaeStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GuhaeStorageBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${GuhaeStorageBucket}/static/*"

  # Single DynamoDB Table - Pay per request
  GuhaeDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-data"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # IAM Role for Lambda functions
  GuhaeServerlessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-serverless-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GuhaeServerlessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt GuhaeDataTable.Arn
                  - !Sub "${GuhaeDataTable.Arn}/index/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${GuhaeStorageBucket}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt GuhaeStorageBucket.Arn

  # API Gateway for REST API
  GuhaeApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      Description: Guhae Rental Property API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Lambda function for API endpoints
  GuhaeApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-api"
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt GuhaeServerlessRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref GuhaeDataTable
          S3_BUCKET_NAME: !Ref GuhaeStorageBucket
          AWS_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import uuid
          from datetime import datetime

          # Initialize AWS clients
          dynamodb = boto3.resource('dynamodb')
          s3_client = boto3.client('s3')
          table = dynamodb.Table(os.environ['DYNAMODB_TABLE_NAME'])
          bucket_name = os.environ['S3_BUCKET_NAME']

          def lambda_handler(event, context):
              try:
                  method = event['httpMethod']
                  path = event['path']
                  
                  # CORS headers
                  headers = {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS'
                  }
                  
                  # Handle CORS preflight
                  if method == 'OPTIONS':
                      return {
                          'statusCode': 200,
                          'headers': headers,
                          'body': ''
                      }
                  
                  # Route requests
                  if path == '/api/properties' and method == 'GET':
                      return list_properties(headers)
                  elif path == '/api/properties' and method == 'POST':
                      return create_property(event, headers)
                  elif path.startswith('/api/properties/') and method == 'GET':
                      property_id = path.split('/')[-1]
                      return get_property(property_id, headers)
                  elif path.startswith('/api/properties/') and method == 'PUT':
                      property_id = path.split('/')[-1]
                      return update_property(property_id, event, headers)
                  elif path.startswith('/api/properties/') and method == 'DELETE':
                      property_id = path.split('/')[-1]
                      return delete_property(property_id, headers)
                  elif path == '/api/dashboard' and method == 'GET':
                      return get_dashboard_stats(headers)
                  else:
                      return {
                          'statusCode': 404,
                          'headers': headers,
                          'body': json.dumps({'error': 'Not found'})
                      }
              
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }

          def list_properties(headers):
              response = table.scan(
                  FilterExpression='begins_with(pk, :pk_prefix)',
                  ExpressionAttributeValues={':pk_prefix': 'PROPERTY#'},
                  Limit=50
              )
              properties = [format_property(item) for item in response.get('Items', [])]
              return {
                  'statusCode': 200,
                  'headers': headers,
                  'body': json.dumps({'properties': properties})
              }

          def create_property(event, headers):
              data = json.loads(event['body'])
              property_id = str(uuid.uuid4())
              
              item = {
                  'pk': f'PROPERTY#{property_id}',
                  'sk': 'METADATA',
                  'gsi1pk': f'OWNER#{data.get("owner_id", "default-owner")}',
                  'id': property_id,
                  'title': data.get('title', ''),
                  'description': data.get('description', ''),
                  'address': data.get('address', ''),
                  'price': data.get('price', 0),
                  'property_type': data.get('property_type', 'residential'),
                  'status': 'active',
                  'created_at': datetime.utcnow().isoformat(),
                  'updated_at': datetime.utcnow().isoformat()
              }
              
              table.put_item(Item=item)
              return {
                  'statusCode': 201,
                  'headers': headers,
                  'body': json.dumps({'property': format_property(item)})
              }

          def get_property(property_id, headers):
              response = table.get_item(
                  Key={'pk': f'PROPERTY#{property_id}', 'sk': 'METADATA'}
              )
              
              if 'Item' not in response:
                  return {
                      'statusCode': 404,
                      'headers': headers,
                      'body': json.dumps({'error': 'Property not found'})
                  }
              
              return {
                  'statusCode': 200,
                  'headers': headers,
                  'body': json.dumps({'property': format_property(response['Item'])})
              }

          def update_property(property_id, event, headers):
              data = json.loads(event['body'])
              data['updated_at'] = datetime.utcnow().isoformat()
              
              # Build update expression
              update_expression = "SET "
              expression_values = {}
              
              for key, value in data.items():
                  update_expression += f"{key} = :{key}, "
                  expression_values[f":{key}"] = value
              
              update_expression = update_expression.rstrip(', ')
              
              response = table.update_item(
                  Key={'pk': f'PROPERTY#{property_id}', 'sk': 'METADATA'},
                  UpdateExpression=update_expression,
                  ExpressionAttributeValues=expression_values,
                  ReturnValues='ALL_NEW'
              )
              
              return {
                  'statusCode': 200,
                  'headers': headers,
                  'body': json.dumps({'property': format_property(response['Attributes'])})
              }

          def delete_property(property_id, headers):
              table.delete_item(
                  Key={'pk': f'PROPERTY#{property_id}', 'sk': 'METADATA'}
              )
              
              return {
                  'statusCode': 200,
                  'headers': headers,
                  'body': json.dumps({'message': 'Property deleted'})
              }

          def get_dashboard_stats(headers):
              response = table.scan(
                  FilterExpression='begins_with(pk, :pk_prefix)',
                  ExpressionAttributeValues={':pk_prefix': 'PROPERTY#'},
                  Select='COUNT'
              )
              
              stats = {
                  'total_properties': response['Count'],
                  'active_properties': response['Count'],  # Simplified
                  'total_users': 1,
                  'total_leases': 0
              }
              
              return {
                  'statusCode': 200,
                  'headers': headers,
                  'body': json.dumps(stats)
              }

          def format_property(item):
              # Remove DynamoDB keys and format for API
              formatted = {k: v for k, v in item.items() if not k.startswith(('pk', 'sk', 'gsi'))}
              formatted.setdefault('images', [])
              return formatted

  # API Gateway Deployment
  GuhaeApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GuhaeApiProxyMethod
    Properties:
      RestApiId: !Ref GuhaeApiGateway
      StageName: prod

  # API Gateway Resource (catch-all proxy)
  GuhaeApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GuhaeApiGateway
      ParentId: !GetAtt GuhaeApiGateway.RootResourceId
      PathPart: "{proxy+}"

  # API Gateway Method
  GuhaeApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GuhaeApiGateway
      ResourceId: !Ref GuhaeApiProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GuhaeApiFunction.Arn}/invocations"

  # Lambda permission for API Gateway
  GuhaeApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GuhaeApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "${GuhaeApiGateway}/*/ANY/*"

  # CloudFront Distribution for global CDN and static hosting
  GuhaeCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Guhae Rental Property App CDN
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt GuhaeStorageBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
          - Id: ApiOrigin
            DomainName: !Sub "${GuhaeApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: /prod
        Enabled: true
        DefaultRootObject: index.html

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${GuhaeApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  CloudFrontUrl:
    Description: "CloudFront Distribution URL"
    Value: !Sub "https://${GuhaeCloudfrontDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-WebUrl"

  StorageBucketName:
    Description: "S3 Bucket for storage"
    Value: !Ref GuhaeStorageBucket
    Export:
      Name: !Sub "${AWS::StackName}-StorageBucket"

  DataTableName:
    Description: "DynamoDB table for data"
    Value: !Ref GuhaeDataTable
    Export:
      Name: !Sub "${AWS::StackName}-DataTable"

  LambdaFunctionName:
    Description: "Lambda function name"
    Value: !Ref GuhaeApiFunction
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunction"
